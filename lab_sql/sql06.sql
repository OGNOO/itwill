/*
 * JOIN: 2개 이상의 테이블에서 검색하는 것.
 * JOIN 종류:
 * 1. INNER JOIN
 * 2. OUTER JOIN
 *  (1) LEFT OUTER JOIN
 *  (2) RIGHT OUTER JOIN
 *  (3) FULL OUTER JOIN
 * 문법:
 * 1. ANSI 표준 문법:
 *  SELECT 컬럼, ...
 *  FROM 테이블1 JOIN 종류 테이블2 ON 조건식
 * 2. ORACLE 문법:
 *  SELECT 컬럼, ...
 *  FROM 테이블1, 테이블2 WHERE 조건식
 */

-- INNER JOIN 과 OUTER JOIN 의 차이점을 설명하기 위해서.
INSERT INTO EMP(
  EMPNO, ENAME, SAL, DEPTNO
)VALUES(
  1004, '오쌤', 3500, 50
);

-- 테이블의 변경 내용을 영구히 저장.
COMMIT;

-- 사번, 이름, 부서번호, 부서이름 검색
-- INNER JOIN. 표준 문법
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E
 --> INNER JOIN 에서 INNER 생략 가능.
  JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO;

-- INNER JOIN. ORACLE 문법
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

-- LEFT (OUTER) JOIN. 표준문법
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E
 --> LEFT OUTER JOIN 에서 OUTER 생략 가능.
  LEFT JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO;

-- LEFT (OUTER) JOIN. ORACLE 문법
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO( + );

-- RIGHT (OUTER) JOIN. 표준문법
SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME
FROM EMP E
  RIGHT JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO;

-- RIGHT (OUTER) JOIN. ORACLE 문법
SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO( + ) = D.DEPTNO;

-- FULL (OUTER) JOIN. 표준 문법
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DEPTNO, D.DNAME
FROM EMP E
 --> FULL OUTER JOIN 에서 OUTER 생략 가능.
  FULL JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO;

-- ORACLE 은 FULL OUTER JOIN 문법을 제공하지 않음
-- 집합 연산(합집합 UNION, 교집합 INTERSECTION, 차집합)을 사용
SELECT E.EMPNO, E.ENAME,  D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO( + )
UNION
SELECT E.EMPNO, E.ENAME,  D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO( + ) = D.DEPTNO;

-- EQUI-JOIN: JOIN 의 조건식이 = 연산자를 사용해서 만들어진 경우.
-- NON-EQUI-JOIN: JOIN 의 조건식이 부등호를 사용해서 만들어진 경우.
-- 사번, 이름, 급여, 급여등급(호봉) 검색.
SELECT E.EMPNO, E.ENAME, E.SAL, S.GRADE
FROM EMP E
  JOIN SALGRADE S
 -- JOIN SALGRADE S ON E.SAL >= S.SAL AND E.SAL <= S.HISAL;
  ON E.SAL BETWEEN S.LOSAL
  AND S.HISAL;

SELECT E.EMPNO, E.ENAME, E.SAL, S.GRADE
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

-- SELF JOIN: 같은 테이블에서 JOIN 하는 것
-- 사번, 이름, 매니저 사번, 매니저 이름을 검색.
SELECT E1.EMPNO, E1.ENAME, E1.MGR AS "매니저 사번", E2.ENAME AS "매니저 이름"
FROM EMP E1
  JOIN EMP E2
  ON E1.MGR = E2.EMPNO;

SELECT E1.EMPNO, E1.ENAME, E1.MGR AS "매니저 사번", E2.ENAME AS "매니저 이름"
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;

SELECT E1.EMPNO, E1.ENAME, E1.MGR AS "매니저 사번", E2.ENAME AS "매니저 이름"
FROM EMP E1
  LEFT JOIN EMP E2
  ON E1.MGR = E2.EMPNO;

SELECT E1.EMPNO, E1.ENAME, E1.MGR AS "매니저 사번", E2.ENAME AS "매니저 이름"
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO( + );

-- ex1. 직원 이름, 직원 근무 도시를 검색. 근무 도시 오름차순 정렬.
SELECT E.ENAME, D.LOC
FROM EMP E
  JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO
ORDER BY D.LOC;

SELECT E.ENAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY D.LOC;

-- ex2. 직원 이름, 매니저 이름, 급여, 급여 등급을 검색.
--      정렬순서: (1)매니저, (2)급여 등급
SELECT E1.ENAME AS "직원 이름", E2.ENAME AS "매니저 이름", E1.SAL, S.GRADE
FROM EMP E1
  JOIN EMP E2
  ON E1.MGR = E2.EMPNO
  JOIN SALGRADE S
  ON E1.SAL BETWEEN S.LOSAL
  AND S.HISAL
ORDER BY E2.ENAME, S.GRADE;

SELECT E1.ENAME AS "직원 이름", E2.ENAME AS "매니저 이름", E1.SAL, S.GRADE
FROM EMP E1, EMP E2, SALGRADE S
WHERE E1.MGR = E2.EMPNO
  AND E1.SAL BETWEEN S.LOSAL AND S.HISAL
ORDER BY "매니저 이름", S.GRADE;

-- ex3. 직원 이름, 부서 이름, 급여, 급여 등급을 검색.
--      정렬 순서: (1)부서 이름, (2)급여 등급
SELECT E.ENAME, D.DNAME, E.SAL, S.GRADE
FROM EMP E
  JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO
  JOIN SALGRADE S
  ON E.SAL BETWEEN S.LOSAL
  AND S.HISAL
ORDER BY D.DNAME, S.GRADE;

SELECT E.ENAME, D.DNAME, E.SAL, S.GRADE
FROM EMP E, DEPT D, SALGRADE S
WHERE E.DEPTNO = D.DEPTNO
  AND E.SAL BETWEEN S.LOSAL AND S.HISAL
ORDER BY D.DNAME, S.GRADE;

-- ex4. 부서 이름, 부서 위치, 부서의 직원수를 검색. 부서 번호 오름 차순.
SELECT D.DNAME, D.LOC, COUNT( * )
FROM EMP E
  JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO
GROUP BY D.DEPTNO, D.DNAME, D.LOC
ORDER BY D.DEPTNO;

SELECT D.DNAME, D.LOC, COUNT( * )
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY D.DNAME, D.LOC, D.DEPTNO
ORDER BY D.DEPTNO;

-- ex5. 부서 번호, 부서 이름, 부서 직원수, 부서의 급여 최솟값,
--      부서의 급여 최댓값 검색. 부서 번호 오름 차순.
SELECT D.DEPTNO, D.DNAME, COUNT( * ), MIN(E.SAL), MAX(E.SAL)
FROM EMP E
  JOIN DEPT D
  ON E.DEPTNO = D.DEPTNO
GROUP BY D.DEPTNO, D.DNAME
ORDER BY D.DEPTNO;

SELECT D.DEPTNO, D.DNAME, COUNT( * ), MIN(E.SAL), MAX(E.SAL)
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY D.DNAME, D.DEPTNO
ORDER BY D.DEPTNO;

-- ex6. 부서 번호, 부서 이름, 사번, 이름, 매니저 사번, 매니저 이름,
--      급여, 급여 등급을 검색. 급여가 3000 이상인 직원들만 검색.
--      정렬 순서: (1) 부서 번호, (2) 사번 오름차순.
SELECT E1.DEPTNO,             D.DNAME, E1.EMPNO AS "사번", E1.ENAME AS "이름", E1.MGR AS "매니저 사번",
  E2.ENAME  AS "매니저 이름", E1.SAL,  S.GRADE
FROM EMP E1
  JOIN DEPT D
  ON E1.DEPTNO = D.DEPTNO
  JOIN EMP E2
  ON E1.MGR = E2.EMPNO
  JOIN SALGRADE S
  ON E1.SAL BETWEEN S.LOSAL
  AND S.HISAL
WHERE E1.SAL >= 3000
ORDER BY E1.DEPTNO, E1.EMPNO;

SELECT E1.DEPTNO,             D.DNAME, E1.EMPNO AS "사번", E1.ENAME AS "이름", E1.MGR AS "매니저 사번",
  E2.ENAME  AS "매니저 이름", E1.SAL,  S.GRADE
FROM EMP E1, EMP E2, DEPT D, SALGRADE S
WHERE E1.SAL >= 3000
  AND E1.MGR = E2.EMPNO
  AND E1.SAL BETWEEN S.LOSAL AND S.HISAL
  AND E1.DEPTNO = D.DEPTNO
ORDER BY E1.DEPTNO, E1.EMPNO;